package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type PreUrl struct {
	Url    string `json:"datos"` //Definim el camp url i la vinculaci贸 amb l'objecte json
	Client *http.Client
}

// struct from json https://mholt.github.io/json-to-go/
type AutoGenerated []struct {
	Origen     Origen     `json:"origen"`
	Elaborado  string     `json:"elaborado"`
	Nombre     string     `json:"nombre"`
	Provincia  string     `json:"provincia"`
	Prediccion Prediccion `json:"prediccion"`
	ID         int        `json:"id"`
	Version    float64    `json:"version"`
}
type Origen struct {
	Productor string `json:"productor"`
	Web       string `json:"web"`
	Enlace    string `json:"enlace"`
	Language  string `json:"language"`
	Copyright string `json:"copyright"`
	NotaLegal string `json:"notaLegal"`
}
type ProbPrecipitacion struct {
	Value   int    `json:"value"`
	Periodo string `json:"periodo"`
}
type CotaNieveProv struct {
	Value   string `json:"value"`
	Periodo string `json:"periodo"`
}
type EstadoCielo struct {
	Value       string `json:"value"`
	Periodo     string `json:"periodo"`
	Descripcion string `json:"descripcion"`
}
type Viento struct {
	Direccion string `json:"direccion"`
	Velocidad int    `json:"velocidad"`
	Periodo   string `json:"periodo"`
}
type RachaMax struct {
	Value   string `json:"value"`
	Periodo string `json:"periodo"`
}
type Dato struct {
	Value int `json:"value"`
	Hora  int `json:"hora"`
}
type Temperatura struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type SensTermica struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type HumedadRelativa struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type Dia struct {
	ProbPrecipitacion []ProbPrecipitacion `json:"probPrecipitacion"`
	CotaNieveProv     []CotaNieveProv     `json:"cotaNieveProv"`
	EstadoCielo       []EstadoCielo       `json:"estadoCielo"`
	Viento            []Viento            `json:"viento"`
	RachaMax          []RachaMax          `json:"rachaMax"`
	Temperatura       Temperatura         `json:"temperatura"`
	SensTermica       SensTermica         `json:"sensTermica"`
	HumedadRelativa   HumedadRelativa     `json:"humedadRelativa"`
	UvMax             int                 `json:"uvMax,omitempty"`
	Fecha             string              `json:"fecha"`
}
type Prediccion struct {
	Dia []Dia `json:"dia"`
}

type Diaria struct {
	ProbPrecipitacio int       `json:"probPrecipitacion"`
	TemperaturaMax   int       `json:"maxima"`
	TemperaturaMin   int       `json:"minima"`
	HumitatRelativa  int       `json:"humedadRelativa"`
	Time             time.Time `json:"-"`
}

func GetPrediccions() (*Diaria, error) {
	url, _ := GetPreUrl()
	valors, err := GetPrediccio(url)
	return valors, err
}

func GetPreUrl() (string, error) {
	url := "https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/08001/?api_key=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYXVndWVycmVyb0BnbWFpbC5jb20iLCJqdGkiOiI1ZGViMWYxMC04ODQyLTRlZWMtYmNmZS03YmFhNGQ4ZmQ1YWMiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTcxNTc5MDU1MiwidXNlcklkIjoiNWRlYjFmMTAtODg0Mi00ZWVjLWJjZmUtN2JhYTRkOGZkNWFjIiwicm9sZSI6IiJ9.k_lImURCiLP4l6a4PqgqILNu2KClIP58cjaSPz2LFPI"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("cache-control", "no-cache")

	res, err := http.DefaultClient.Do(req)

	if err != nil {
		log.Println("La conexi贸 amb aemet ha tingut l'error", err)
		return "", err
	}

	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Println("Error recuperant el json", err)
		return "", err
	}

	preUrl := PreUrl{}
	err = json.Unmarshal(body, &preUrl)
	if err != nil {
		log.Println("Error decodificant el Json", err)
		return "", err
	}

	return preUrl.Url, err

}

func GetPrediccio(url string) (*Diaria, error) {

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("cache-control", "no-cache")

	res, err := http.DefaultClient.Do(req)

	if err != nil {
		log.Println("La conexi贸 amb aemet ha tingut l'error", err)
		return nil, err
	}

	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Println("Error recuperant el json", err)
		return nil, err
	}

	prediccio := AutoGenerated{}
	var precipitacio, tempMax, tempMin, humitat int // Creaci贸 de les variables sobre les metriques rebudes
	err = json.Unmarshal([]byte(body), &prediccio)
	if err != nil {
		log.Println("Error decodificant el json", err)
		return nil, err
	}

	precipitacio = prediccio[0].Prediccion.Dia[0].ProbPrecipitacion[0].Value
	tempMax = prediccio[0].Prediccion.Dia[0].Temperatura.Maxima
	tempMin = prediccio[0].Prediccion.Dia[0].Temperatura.Minima
	humitat = prediccio[0].Prediccion.Dia[0].HumedadRelativa.Maxima

	var parte = Diaria{
		ProbPrecipitacio: precipitacio,
		TemperaturaMax:   tempMax,
		TemperaturaMin:   tempMin,
		HumitatRelativa:  humitat,
		Time:             time.Now(),
	}

	return &parte, err // retoorn
}
